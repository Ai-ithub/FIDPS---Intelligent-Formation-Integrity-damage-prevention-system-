version: '3.8'

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: fidps-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - fidps-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: fidps-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # High throughput configuration for MWD/LWD data
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - fidps-network

  # Kafka Connect for data ingestion
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    hostname: kafka-connect
    container_name: fidps-kafka-connect
    depends_on:
      - kafka
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: fidps-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: fidps-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: fidps-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: fidps-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      - ./connectors:/usr/share/confluent-hub-components
    networks:
      - fidps-network

  # PostgreSQL for operational data
  postgres:
    image: postgres:15-alpine
    hostname: postgres
    container_name: fidps-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: fidps_operational
      POSTGRES_USER: fidps_user
      POSTGRES_PASSWORD: fidps_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - fidps-network

  # MongoDB for anomaly logs and document storage
  mongodb:
    image: mongo:7.0
    hostname: mongodb
    container_name: fidps-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: fidps_admin
      MONGO_INITDB_ROOT_PASSWORD: fidps_mongo_password
      MONGO_INITDB_DATABASE: fidps_anomalies
    volumes:
      - mongodb-data:/data/db
      - ./mongo/init:/docker-entrypoint-initdb.d
    networks:
      - fidps-network

  # MinIO for S3-compatible object storage (Data Lake)
  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: fidps-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: fidps_minio_admin
      MINIO_ROOT_PASSWORD: fidps_minio_password
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - fidps-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: fidps-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass fidps_redis_password
    volumes:
      - redis-data:/data
    networks:
      - fidps-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: fidps-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: fidps-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: fidps-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    networks:
      - fidps-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: fidps-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fidps-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: fidps-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: fidps_grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fidps-network

  # Flink Data Validation Service
  flink-validation:
    build:
      context: ./data-validation
      dockerfile: Dockerfile
    container_name: fidps-flink-validation
    restart: unless-stopped
    ports:
      - "8081:8081"  # Flink Web UI
      - "6123:6123"  # Flink JobManager RPC
      - "9249:9249"  # Prometheus metrics
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address:flink-validation
      - JOB_MANAGER_RPC_ADDRESS=flink-validation
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_URL=jdbc:postgresql://postgres:5432/fidps_operational
      - POSTGRES_USER=fidps_user
      - POSTGRES_PASSWORD=fidps_password
      - MONGO_URL=mongodb://fidps_admin:fidps_mongo_password@mongodb:27017/fidps_anomalies?authSource=admin
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=fidps_redis_password
    volumes:
      - flink-data:/opt/flink/app/data
      - flink-logs:/opt/flink/app/logs
      - ./data-validation/config:/opt/flink/app/config
    networks:
      - fidps-network
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ML Anomaly Detection Service
  ml-anomaly-detection:
    build:
      context: ./ml-anomaly-detection
      dockerfile: Dockerfile
    container_name: fidps-ml-anomaly-detection
    ports:
      - "8080:8080"  # API endpoint
      - "8081:8081"  # Admin endpoint
      - "9090:9090"  # Prometheus metrics
    environment:
      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_CONSUMER_GROUP_ID=ml-anomaly-detection-group
      - KAFKA_INPUT_TOPICS=mwd-lwd-data,csv-mwd-lwd-data,witsml-data,data-validation-results
      - KAFKA_OUTPUT_TOPICS=ml-anomalies,ml-predictions,ml-alerts
      
      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_DB=${MONGODB_DB}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # ML Configuration
      - ML_MODEL_PATH=/app/models
      - ML_CACHE_PATH=/app/cache
      - ML_LOG_LEVEL=INFO
      - ML_BATCH_SIZE=100
      - ML_PREDICTION_INTERVAL=30
      - ML_RETRAIN_INTERVAL=3600
      
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - API_WORKERS=4
      
      # Monitoring
      - PROMETHEUS_PORT=9090
      - HEALTH_CHECK_INTERVAL=30
    volumes:
      - ml_models:/app/models
      - ml_cache:/app/cache
      - ml_logs:/app/logs
      - ./ml-anomaly-detection/config:/app/config:ro
    networks:
      - fidps-network
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # API Dashboard Service
  api-dashboard:
    build:
      context: ./api-dashboard
      dockerfile: Dockerfile
    container_name: fidps-api-dashboard
    ports:
      - "8000:8000"  # Main API port
      - "8001:8001"  # Admin port
      - "9091:9091"  # Prometheus metrics
    environment:
      # Kafka configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONSUMER_GROUP: api-dashboard
      
      # Database connections
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: fidps_operational
      POSTGRES_USER: fidps_user
      POSTGRES_PASSWORD: fidps_password
      
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_DB: fidps_anomalies
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      
      # API configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      ADMIN_PORT: 8001
      
      # Dashboard settings
      DASHBOARD_TITLE: "FIDPS Dashboard"
      REFRESH_INTERVAL: 30
      MAX_CHART_POINTS: 100
      
      # WebSocket settings
      WS_HEARTBEAT_INTERVAL: 30
      WS_MAX_CONNECTIONS: 100
      
      # Monitoring
      METRICS_PORT: 9091
      ENABLE_METRICS: "true"
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    volumes:
      - dashboard_logs:/app/logs
      - ./api-dashboard/static:/app/static
      - ./api-dashboard/templates:/app/templates
    networks:
      - fidps-network
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - ml-anomaly-detection
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  mongodb-data:
  minio-data:
  redis-data:
  prometheus-data:
  grafana-data:
  flink-data:
  flink-logs:
  ml_models:
  ml_cache:
  ml_logs:
  dashboard_logs:

networks:
  fidps-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16